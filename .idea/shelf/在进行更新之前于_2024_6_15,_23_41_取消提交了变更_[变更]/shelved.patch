Index: crawler/myokx/close.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Union\nimport traceback\nfrom threading import Thread\nfrom paux.digit import origin_float, origin_int\nfrom okx.app import code\nfrom okx.app import exception\nfrom okx.app.trade.tradeSWAP.order import TradeOrder\nfrom okx.app.trade.tradeSWAP.quantity_and_price import TradeQuantityAndPrice\n\n\nclass TradeClose(TradeOrder, TradeQuantityAndPrice):\n    # 限价单平仓\n    def close_limit(\n            self,\n            instId: str,\n            tdMode: str,\n            posSide: str,\n            closePrice: Union[int, float, str, origin_float, origin_int, None] = None,\n            tpRate: Union[int, float, None] = None,\n            quantityCT: Union[int, float, str, origin_float, origin_int] = 'all',\n            meta: dict = {},\n            block: bool = False,\n            timeout: Union[int, float] = 60,\n            delay: Union[int, float] = 0.2,\n            cancel: bool = True,\n            clOrdId: str = '',\n            tag: str = '',\n            newThread: bool = False,\n            callback: object = None,\n            errorback: object = None,\n    ) -> dict:\n        '''\n        :param instId: 产品ID\n        :param tdMode: 持仓方式\n            isolated：逐仓 cross：全仓\n        :param posSide: 持仓方向\n            long：多单 short：空单\n        :param closePrice: 卖出价格\n        :param tpRate: 挂单止盈率\n            注意：\n                1. closePrice 和 tpRate必须填写其中一个\n                2. closePrice 和 tpRate的优先级 closePrice > tpRate\n                3. 当closePrice为空\n                    posSide = 'long'    tpRate = askPrice * (1 + abs(tpRate))\n                    posSide = 'short'   tpRate = bidPrice * (1 - abs(tpRate))\n        :param quantityCT: 平仓数量\n            注意：\n                1. quantityCT是合约张数，并不是货币数量\n                2. quantityCT = 'all' instId可用合约全部平仓\n        :param meta: 回调函数传递参数\n        :param block: 是否堵塞\n        :param timeout: 订单超时时间 （秒)\n        :param delay: 检测订单状态的间隔 (秒)\n        :param cancel: 未完全成交是否取消订单\n        :param clOrdId: 客户自定义订单ID\n            字母（区分大小写）与数字的组合，可以是纯字母、纯数字且长度要在1-32位之间\n        :param tag: 订单标签\n            字母（区分大小写）与数字的组合，可以是纯字母、纯数字，且长度在1-16位之间\n        :param newThread: 是否开启新线程执行\n        :param callback: 非执行异常的回调函数\n        :param errorback: 执行异常的回调函数\n        '''\n\n        # 常量参数\n        ORDTYPE = 'limit'\n\n        # 记录信息\n        information = {\n            'instType': 'SWAP',\n            'instId': instId,\n            'state': None,\n            'ordId': None,\n            'meta': meta,\n            'request_param': None,\n            'func_param': None,\n            'get_order_result': None,\n            'set_order_result': None,\n            'error_result': None,\n            'cancel_result': None,\n        }\n\n        # 函数的参数\n        information['func_param'] = dict(\n            instId=instId,\n            tdMode=tdMode,\n            posSide=posSide,\n            closePrice=closePrice,\n            tpRate=tpRate,\n            quantityCT=quantityCT,\n            meta=meta,\n            block=block,\n            timeout=timeout,\n            delay=delay,\n            cancel=cancel,\n            clOrdId=clOrdId,\n            tag=tag,\n            newThread=newThread,\n            callback=callback,\n            errorback=errorback,\n        )\n        # meta\n        information['meta'] = meta\n\n        def main_func(\n                instId=instId,\n                tdMode=tdMode,\n                posSide=posSide,\n                closePrice=closePrice,\n                tpRate=tpRate,\n                quantityCT=quantityCT,\n                clOrdId=clOrdId,\n                tag=tag,\n                block=block,\n                timeout=timeout,\n                delay=delay,\n                cancel=cancel,\n        ):\n            # 验证posSide\n            if posSide not in ['long', 'short']:\n                msg = 'posSide must in [\"long\",\"short\"].'\n                raise exception.ParamException(msg)\n            # 验证tdMode\n            if tdMode not in ['isolated', 'cross']:\n                msg = 'tdMode must in [\"isolated\",\"cross\"].'\n                raise exception.ParamException(msg)\n            # closePrice和tpLine不能同时为空\n            if closePrice in [None, ''] and tpRate in [None, '']:\n                msg = 'closePrice and tpRate can not be empty together'\n                raise exception.ParamException(msg)\n            # 设置sell\n            if posSide == 'long':\n                side = 'sell'  # 卖出平多\n            else:\n                side = 'buy'  # 买入平空\n            # 【卖出价格】 closePrice closePrice_f\n            # 字符串\n            if isinstance(closePrice, str):\n                closePrice_f = closePrice\n                closePrice = float(closePrice)\n            # origin\n            elif isinstance(closePrice, origin_float) or isinstance(closePrice, origin_int):\n                closePrice_f = closePrice.origin()\n                closePrice = closePrice\n            # 数字对象和None\n            else:\n                # 如果没有closePrice，根据tpRate计算closePrice\n                if not closePrice:\n                    get_ticker_result = self._market.get_ticker(instId=instId)\n                    # [ERROR RETURN]\n                    if get_ticker_result['code'] != '0':\n                        return get_ticker_result\n                    # posSide = 'long' 使用卖出价格\n                    if posSide == 'long':\n                        askPx = get_ticker_result['data']['askPx']\n                        askPx = float(askPx)\n                        closePrice = askPx * (1 + abs(tpRate))\n                    # posSide = 'short' 使用买入价格\n                    else:\n                        bidPx = get_ticker_result['data']['bidPx']\n                        bidPx = float(bidPx)\n                        closePrice = bidPx * (1 - abs(tpRate))\n                # 圆整 -> closePrice\n                # 卖出平多 价格向上圆整 买入平空 价格向下圆整\n                round_price_result = self.round_price(\n                    price=closePrice,\n                    instId=instId,\n                    type='CEIL' if posSide == 'long' else 'FLOOR'\n                )\n                # [ERROR RETURN]\n                if round_price_result['code'] != '0':\n                    return round_price_result\n                closePrice = round_price_result['data']\n                # 转化为字符串 closePrice_f\n                closePrice_f_result = self.price_to_f(\n                    price=closePrice,\n                    instId=instId,\n                )\n                # [ERROR RETURN]\n                if closePrice_f_result['code'] != '0':\n                    return closePrice_f_result\n                closePrice_f = closePrice_f_result['data']\n            # 【卖出数量】 quantity quantity_f\n            # 全部\n            if quantityCT == 'all':\n                positionMap_result = self._account.get_positionsMap()\n                # [ERROR RETURN]\n                if positionMap_result['code'] != '0':\n                    return positionMap_result\n                availPos = positionMap_result['data'][tdMode][posSide][instId]['availPos']\n                availPos = origin_float(availPos)\n                quantityCT = availPos\n                quantityCT_f = availPos.origin()\n            # 数值字符串\n            elif isinstance(quantityCT, str):\n                quantityCT_f = quantityCT\n                quantityCT = float(quantityCT)\n            # origin\n            elif isinstance(quantityCT, origin_float) or isinstance(quantityCT, origin_int):\n                quantityCT_f = quantityCT.origin()\n            # 数字对象 圆整 转化为字符串\n            else:\n                round_quantity_result = self.round_quantity(\n                    quantity=quantityCT, instId=instId,\n                    ordType=ORDTYPE,\n                )\n                # [ERROR RETURN]\n                if round_quantity_result['code'] != '0':\n                    return round_quantity_result\n                quantityCT = round_quantity_result['data']\n                quantity_to_f_result = self.quantity_to_f(\n                    quantity=quantityCT, instId=instId,\n                )\n                # [ERROR RETURN]\n                if quantity_to_f_result['code'] != '0':\n                    return quantity_to_f_result\n                quantityCT_f = quantity_to_f_result['data']\n\n            request_param = dict(\n                instId=instId,\n                tdMode=tdMode,\n                posSide=posSide,\n                side=side,\n                ordType=ORDTYPE,\n                sz=quantityCT_f,\n                clOrdId=clOrdId,\n                tag=tag,\n                px=closePrice_f,\n            )\n            information['request_param'] = request_param\n            set_order_result = self.set_order(**request_param)\n            information['set_order_result'] = set_order_result\n            ordId = set_order_result['data']['ordId']\n            information['ordId'] = ordId\n            # [ERROR RETURN]\n            if set_order_result['code'] != '0':\n                return set_order_result\n\n            # 是否时堵塞模式\n            if not block:\n                return None\n\n            order_result = self.wait_order_FILLED(\n                instId=instId,\n                ordId=ordId,\n                timeout=timeout,\n                delay=delay,\n            )\n            information['get_order_result'] = order_result\n            information['state'] = order_result['data']['state']\n\n            if order_result['data']['state'] == self.ORDER_STATUS.FILLED:\n                # [SUC RETURN]\n                return None\n            if cancel:\n                # 订单取消失败\n                cancel_order_result = self.cancel_order(instId=instId, ordId=ordId)\n                information['cancel_result'] = cancel_order_result\n                # [ERROR RETURN]\n                if cancel_order_result['code'] != '0':\n                    return cancel_order_result\n                # 查看订单结果\n                get_order_result = self.get_order(\n                    instId=instId, ordId=ordId\n                )\n                if get_order_result['code'] != '0':\n                    return get_order_result\n                information['get_order_result'] = get_order_result\n                information['state'] = get_order_result['data']['state']\n            return None\n\n        main_data = dict(\n            instId=instId,\n            tdMode=tdMode,\n            posSide=posSide,\n            closePrice=closePrice,\n            tpRate=tpRate,\n            quantityCT=quantityCT,\n            clOrdId=clOrdId,\n            tag=tag,\n            block=block,\n            timeout=timeout,\n            delay=delay,\n            cancel=cancel,\n        )\n\n        def inner_func():\n            try:\n                error_result = main_func(**main_data)\n                information['error_result'] = error_result\n            except:\n                error_msg = str(traceback.format_exc())\n                error_result = {\n                    'code': code.FUNC_EXCEPTION[0],\n                    'data': {},\n                    'msg': error_msg,\n                }\n                information['error_result'] = error_result\n\n            if information['error_result']:\n                if errorback:\n                    errorback(information)\n            else:\n                if callback:\n                    callback(information)\n            return information\n\n        if newThread == False:\n            return inner_func()\n        else:\n            t = Thread(target=inner_func)\n            t.start()\n            return t\n\n    # 市价单平仓\n    def close_market(\n            self,\n            instId: str,\n            tdMode: str,\n            posSide: str,\n            quantityCT: Union[int, float, str, origin_float, origin_int] = 'all',\n            meta: dict = {},\n            timeout: Union[int, float] = 60,\n            delay: Union[int, float] = 0.2,\n            cancel: bool = True,\n            clOrdId: str = '',\n            tag: str = '',\n            newThread: bool = False,\n            callback: object = None,\n            errorback: object = None,\n    ) -> dict:\n        '''\n        :param instId: 产品ID\n        :param tdMode: 持仓方式\n            isolated：逐仓 cross：全仓\n        :param posSide: 持仓方向\n            long：多单 short：空单\n        :param quantityCT: 平仓数量\n            注意：\n                1. quantityCT是合约张数，并不是货币数量\n                2. quantityCT = 'all' 表示持仓的全部张数\n        :param meta: 回调函数传递参数\n        :param timeout: 订单超时时间 （秒)\n        :param delay: 检测订单状态的间隔 (秒)\n        :param cancel: 未完全成交是否取消订单\n        :param clOrdId: 客户自定义订单ID\n            字母（区分大小写）与数字的组合，可以是纯字母、纯数字且长度要在1-32位之间\n        :param tag: 订单标签\n            字母（区分大小写）与数字的组合，可以是纯字母、纯数字，且长度在1-16位之间\n        :param newThread: 是否开启新线程执行\n        :param callback: 非执行异常的回调函数\n        :param errorback: 执行异常的回调函数\n        '''\n        # 常量参数\n        ORDTYPE = 'market'\n\n        # 记录信息\n        information = {\n            'instType': 'SWAP',\n            'instId': instId,\n            'state': None,\n            'ordId': None,\n            'meta': meta,\n            'request_param': None,\n            'func_param': None,\n            'get_order_result': None,\n            'set_order_result': None,\n            'error_result': None,\n            'cancel_result': None,\n        }\n\n        # 函数的参数\n        information['func_param'] = dict(\n            instId=instId,\n            tdMode=tdMode,\n            posSide=posSide,\n            quantityCT=quantityCT,\n            meta=meta,\n            timeout=timeout,\n            delay=delay,\n            cancel=cancel,\n            clOrdId=clOrdId,\n            tag=tag,\n            newThread=newThread,\n            callback=callback,\n            errorback=errorback,\n        )\n\n        # meta\n        information['meta'] = meta\n\n        def main_func(\n                instId=instId,\n                tdMode=tdMode,\n                posSide=posSide,\n                quantityCT=quantityCT,\n                clOrdId=clOrdId,\n                tag=tag,\n                timeout=timeout,\n                delay=delay,\n                cancel=cancel,\n        ):\n            # 验证posSide\n            if posSide not in ['long', 'short']:\n                msg = 'posSide must in [\"long\",\"short\"].'\n                raise exception.ParamException(msg)\n            # 验证tdMode\n            if tdMode not in ['isolated', 'cross']:\n                msg = 'tdMode must in [\"isolated\",\"cross\"].'\n                raise exception.ParamException(msg)\n            # 设置sell\n            if posSide == 'long':\n                side = 'sell'  # 卖出平多\n            else:\n                side = 'buy'  # 买入平空\n            # 【平仓数量】 quantityCT quantityCT_f\n            # 全部\n            if quantityCT == 'all':\n                positionMap_result = self._account.get_positionsMap()\n                # [ERROR RETURN]\n                if positionMap_result['code'] != '0':\n                    return positionMap_result\n                availPos = positionMap_result['data'][tdMode][posSide][instId]['availPos']\n                availPos = origin_float(availPos)\n                quantityCT = availPos\n                quantityCT_f = availPos.origin()\n            # 数值字符串\n            elif isinstance(quantityCT, str):\n                quantityCT_f = quantityCT\n                quantityCT = float(quantityCT)\n            # 数值\n            else:\n                # 圆整 -> quantityCT\n                round_quantity_result = self.round_quantity(\n                    quantity=quantityCT, instId=instId,\n                    ordType='market',\n                )\n                # [ERROR RETURN]\n                if round_quantity_result['code'] != '0':\n                    return round_quantity_result\n                quantityCT = round_quantity_result['data']\n                # 转化为字符串 -> quantityCT_f\n                quantity_f_result = self.quantity_to_f(\n                    quantity=quantityCT,\n                    instId=instId,\n                )\n                # [ERROR RETURN]\n                if quantity_f_result['code'] != '0':\n                    return quantity_f_result\n                quantityCT_f = quantity_f_result['data']\n            # API下单请求参数\n            request_param = dict(\n                instId=instId,\n                tdMode=tdMode,\n                posSide=posSide,\n                side=side,\n                ordType=ORDTYPE,\n                sz=quantityCT_f,\n                clOrdId=clOrdId,\n                tag=tag,\n            )\n            information['request_param'] = request_param\n            set_order_result = self.set_order(**request_param)\n            information['set_order_result'] = set_order_result\n            ordId = set_order_result['data']['ordId']\n            information['ordId'] = ordId\n            # [ERROR RETURN]\n            if set_order_result['code'] != '0':\n                return set_order_result\n\n            order_result = self.wait_order_FILLED(\n                instId=instId,\n                ordId=ordId,\n                timeout=timeout,\n                delay=delay,\n            )\n\n            information['get_order_result'] = order_result\n            information['state'] = order_result['data']['state']\n\n            if order_result['data']['state'] == self.ORDER_STATUS.FILLED:\n                # [SUC RETURN]\n                return None\n            if cancel:\n                cancel_order_result = self.cancel_order(\n                    instId=instId, ordId=ordId,\n                )\n                information['cancel_result'] = cancel_order_result\n                # [ERROR RETURN]\n                if cancel_order_result['code'] != '0':\n                    return cancel_order_result\n                # 查看订单结果\n                get_order_result = self.get_order(instId=instId, ordId=ordId)\n                if get_order_result['code'] != '0':\n                    return get_order_result\n                information['get_order_result'] = get_order_result\n                information['state'] = get_order_result['data']['state']\n            return None\n\n        main_data = dict(\n            instId=instId,\n            tdMode=tdMode,\n            posSide=posSide,\n            quantityCT=quantityCT,\n            clOrdId=clOrdId,\n            tag=tag,\n            timeout=timeout,\n            delay=delay,\n            cancel=cancel,\n        )\n\n        def inner_func():\n            try:\n                error_result = main_func(**main_data)\n                information['error_result'] = error_result\n            except:\n                error_msg = str(traceback.format_exc())\n                error_result = {\n                    'code': code.FUNC_EXCEPTION[0],\n                    'data': {},\n                    'msg': error_msg,\n                }\n                information['error_result'] = error_result\n\n            if information['error_result']:\n                if errorback:\n                    errorback(information)\n            else:\n                if callback:\n                    callback(information)\n            return information\n\n        if newThread == False:\n            return inner_func()\n        else:\n            t = Thread(target=inner_func)\n            t.start()\n            return t\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crawler/myokx/close.py b/crawler/myokx/close.py
--- a/crawler/myokx/close.py	(revision 5a578f7208e916469b03dcc38a714c42937801da)
+++ b/crawler/myokx/close.py	(date 1718439707155)
@@ -535,3 +535,43 @@
             t = Thread(target=inner_func)
             t.start()
             return t
+
+    # POST / 市价仓位全平
+    def set_close_position(self, instId: str, mgnMode: str, posSide: str = '', ccy: str = '', autoCxl: bool = '',
+                           clOrdId: str = '', tag: str = '', proxies={}, proxy_host: str = None):
+        '''
+        市价平掉指定交易产品的持仓
+        https://www.okx.com/docs-v5/zh/#order-book-trading-trade-post-close-positions
+
+        限速：20次/2s
+
+
+        请求参数:
+        Parameter           Type        Required    Description
+
+        instId              String      是           产品ID
+        posSide             String      可选          持仓方向买卖模式下：可不填写此参数，默认值net，如果填写，仅可以填写net开平仓模式下： 必须填写此参数，且仅可以填写long：平多 ，short：平空
+        mgnMode             String      是           保证金模式cross：全仓 ；isolated：逐仓
+        ccy                 String      可选          保证金币种，单币种保证金模式的全仓币币杠杆平仓必填
+        autoCxl             Boolean     否           当市价全平时，平仓单是否需要自动撤销,默认为false.false：不自动撤单true：自动撤单
+        clOrdId             String      否           客户自定义ID字母（区分大小写）与数字的组合，可以是纯字母、纯数字且长度要在1-32位之间。
+        tag                 String      否           订单标签字母（区分大小写）与数字的组合，可以是纯字母、纯数字，且长度在1-16位之间。
+        返回参数:
+        Parameter           Type        Description
+        instId              String      产品ID
+        posSide             String      持仓方向
+        clOrdId             String      客户自定义ID字母（区分大小写）与数字的组合，可以是纯字母、纯数字且长度要在1-32位之间。
+        tag                 String      订单标签字母（区分大小写）与数字的组合，可以是纯字母、纯数字，且长度在1-16位之间。
+        '''
+        request_param = dict(
+            instId=instId,
+            mgnMode=mgnMode,
+            posSide=posSide,
+            ccy=ccy,
+            autoCxl=autoCxl,
+            clOrdId=clOrdId,
+            tag=tag,
+            proxies=proxies,
+            proxy_host=proxy_host,
+        )
+        return self.api.set_close_position(**request_param)
Index: crawler/1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from crawler.myokx import app\n# from okx import app\nfrom okx.api.public import Public\nimport time\n\n# 模拟子1\nacc = {'key': '2f071928-25bf-4ea9-b171-efe4b6e4eefd',\n       'secret': '0BE4E80811E950DBA93FA013D1F36516',\n       'passphrase': '112233Ww..',\n       # 'proxies': {\n       #              'http': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10322',\n       #              'https': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10322'\n       #             }\n       }\n# 模拟子5\n# acc = {'key': '5e773b21-f919-41f1-bdca-62834fbb2d03',\n#        'secret': 'EC9399DC09F9C894F4E4E44EA66FA7C2',\n#        'passphrase': '112233Ww..',\n#        # 'proxies': {\n#        #              'http': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10322',\n#        #              'https': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10322'\n#        #             }\n#        }\n# 模拟子2\n# acc = {'key': '2842457e-1d17-4a58-a0d6-25d71044e75a',\n#        'secret': 'A3A985254556CAAB007ABB15F7FECC9B',\n#        'passphrase': '112233Ww..',\n#        # 'proxies': {\n#        #              'http': 'socks5h://15755149931drf-1:m1ktqqts@154.9.255.134:5001',\n#        #              'https': 'socks5h://15755149931drf-1:m1ktqqts@154.9.255.134:5001'\n#        #             }\n#        }\n# 模拟主1\n# acc = {'key': 'ba8dccb8-943d-468c-bcbf-8dced96fc7cf',\n#        'secret': 'BBA3FF14AC698CDBAA33219F858E7BF6',\n#        'passphrase': '112233Ww..',\n#     #    'proxies': {\n#     #                 'http': 'socks5h://copyapes:12345678@38.147.173.111:5001',\n#     #                 'https': 'socks5h://copyapes:12345678@38.147.173.111:5001'\n#     #                }\n#        }\n# acc = {'key': '5853686f-a0ed-4c76-a382-5ac480740883',\n#        'secret': '2DCFFF11C68C2E88C6437268B28A87FE',\n#        'passphrase': '112233Ww..',\n#        'proxies': {\n#            'http': 'socks5h://copyapes:12345678@proxy.zhizhuip.com:5001',\n#            'https': 'socks5h://copyapes:12345678@proxy.zhizhuip.com:5001'\n#        }\n#        }\n# 实盘\n# acc = {'key': '63b35cdd-261f-4fd5-ba2a-a607cd7460c9',\n#        'secret': '52A5665FC31BFF7552D2980CE5C7F0F1',\n#        'passphrase': '112233Ww..',\n#        'proxies': {\n#                     'http': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10099',\n#                     'https': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.97:10099'\n#                    }\n#        }\n# 测试\n# acc = {'key': '3fb304e4-2723-4b9a-aa86-7fbcb1661ac4',\n#        'secret': 'DC44B17155DDEB723DF944D73632B6C2',\n#        'passphrase': 'Rr749291263.',\n#        }\n# acc = {'key': 'da5fea7c-99e8-4892-9fdf-369a0d35fe6e',\n#        'secret': '6A47EAA50207A62E332F9A1D1B3EF97C',\n#        'passphrase': 'Yaoyao103123..',\n#        'proxies': {\n#                     'http': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.99:5001',\n#                     'https': 'socks5h://15755149931sct-5:8ivtkleb@14.29.122.99:5001'\n#                    }\n#        }\n\n#\nobj = app.OkxSWAP(**acc)\nobj.account.api.flag = '1'\nobj.trade.api.flag = '1'\n# start_time = time.time()\n# 查看账户配置信息\n# print(obj.account.get_config())\n\n# a = obj.account.get_positions_history(limit=1)\n# print(a)\n\n# set_position_mode_result = obj.account.set_position_mode(\n#                 posMode='long_short_mode')\n# if set_position_mode_result['code'] == '0':\n#     print('[SUCCESS] 设置持仓方式为双向持仓成功，posMode=\"long_short_mode\"')\n# else:\n#     print('[FAILURE] 设置持仓方式为双向持仓失败，请手动设置：posMode=\"long_short_mode\"')\n#\n'''\n市价开仓\n'''\n# a = obj.trade.open_market(instId=\"DOGE-USDT-SWAP\", posSide=\"long\", openMoney=28800, tdMode='cross',\n#                           lever=50)\n# end_time = time.time()\n# t = start_time - end_time\n# print(a)\n# print(t)\n\n'''\n查询模拟盘倍数\n'''\n# from crawler.utils.get_trade_times import get_trade_times\n# trade_times = get_trade_times(\"ETH-USDT-SWAP\", '1', acc)\n# print(trade_times)\n# result = obj.trade.open_market(instId=\"BTC-USDT-SWAP\", posSide=\"long\", openMoney=10*trade_times, tdMode='cross',\n#                                   lever=5)\n# result = {'instType': 'SWAP', 'instId': 'LTC-USDT-SWAP', 'state': None, 'ordId': None, 'meta': {}, 'request_param': {'instId': 'LTC-USDT-SWAP', 'tdMode': 'cross', 'posSide': 'long', 'side': 'buy', 'ordType': 'market', 'sz': '0', 'clOrdId': '', 'tag': ''}, 'func_param': {'instId': 'LTC-USDT-SWAP', 'tdMode': 'cross', 'posSide': 'long', 'lever': 3, 'openMoney': 5, 'quantityCT': None, 'meta': {}, 'timeout': 60, 'delay': 0.2, 'cancel': True, 'clOrdId': '', 'tag': '', 'newThread': False, 'callback': None, 'errorback': None}, 'get_order_result': None, 'set_order_result': {'code': '1', 'data': [{'clOrdId': '', 'ordId': '', 'sCode': '51000', 'sMsg': 'Parameter sz error', 'tag': ''}], 'inTime': '1704986885902318', 'msg': 'All operations failed', 'outTime': '1704986885902391'}, 'error_result': {'code': 'FUNC_EXCEPTION', 'data': {}, 'msg': 'Traceback (most recent call last):\\n  File \"/Users/lichaoyuan/Desktop/copytrade/crawler/myokx/open.py\", line 557, in inner_func\\n    error_result = main_func(**main_data)\\n  File \"/Users/lichaoyuan/Desktop/copytrade/crawler/myokx/open.py\", line 507, in main_func\\n    ordId = set_order_result[\\'data\\'][\\'ordId\\']\\nTypeError: list indices must be integers or slices, not str\\n'}, 'cancel_result': None}\n# print(result)\n\n'''\n查询币价、开仓保证金转换张数\n'''\n# get_ticker_result = obj.trade._market.get_ticker(instId=\"ETH-USDT-SWAP\")\n# print(get_ticker_result)\n# openPrice = float(get_ticker_result['data']['askPx'])\n# print(openPrice)\n# get_quantity_result = obj.trade.get_quantity(\n#                         openPrice=openPrice, openMoney=-10*trade_times,\n#                         instId=\"ETH-USDT-SWAP\", ordType='market',\n#                         leverage=20,\n#                     )\n# print('get_quantity_result',get_quantity_result['data'],type(get_quantity_result['data']))\n# exchangeInfo = obj.trade._market.get_exchangeInfo(\n#             instId=\"W-USDT-SWAP\",\n#             expire_seconds=60 * 5\n#         )\n# ctVal = exchangeInfo['data']['ctVal']\n# print(ctVal)\n# quantity = 1*trade_times * 5 / openPrice / float(ctVal)\n# print(quantity)\n# stepSize = exchangeInfo['data']['lotSz']\n# import math\n# if float(stepSize) >= 1:\n#     quantity = math.floor(quantity)\n#     print('1', quantity)\n# else:\n#     quantity = math.floor(quantity * 10) / 10\n#     print('0', quantity)\n\n#\n# a = obj.trade.close_market(instId=\"ETH-USDT-SWAP\", posSide='long', quantityCT=get_quantity_result['data'],\n#                                         tdMode='cross')\n# print(a)\n\n'''\n错误信息解析\n'''\n# try:\n#     s_code_value = result.get('set_order_result', {}).get('data', {}).get('sCode')\n#     if s_code_value == '0':\n#         print(s_code_value)\n# except:\n#     try:\n#         s_code_value = result.get('set_order_result', {}).get('data', [{}])[0].get('sCode')\n#         if s_code_value == '51000':\n#             print('账户模式不支持')\n#         elif s_code_value == '51011':\n#             print('账户余额不足')\n#         elif s_code_value == '51001':\n#             print('产品不存在')\n#         elif s_code_value == '51013':\n#             print('订单数量不合法')\n#     except:\n#         try:\n#             s_code_value = result.get('error_result', {}).get('code')\n#             if s_code_value == '51001':\n#                 print('产品不存在')\n#         except:\n#             pass\n\n'''\n查询当前、历史持仓\n'''\n# a = obj.trade.open_market(instId='ETH-USDT-SWAP', posSide='long', openMoney=100,\n#                                       tdMode='cross', lever=100)\n# obj.trade.close_market(instId='ETH-USDT-SWAP', posSide='long', quantityCT=220, tdMode='cross')\n# 当前持仓\n# a = obj.account.get_positions()\n# print(a)\n# 历史持仓\n# a = obj.account.get_positions_history(limit=2)\n# print(a)\n# 账户信息\n# a = obj.account.get_balance(ccy='BTC,ETH,USDT').get('data')[0].get('details') # 限速：10次/2s\n# result = {}\n\n# for item in a:\n#     ccy = item.get('ccy')\n#     cashBal = item.get('cashBal')\n#     result[ccy] = cashBal\n# # print(result)\n# bnb = result.get('BNB', 0)\n# print(bnb)\n\n\n# 基础信息\n# a = Public().get_instruments(instType='SWAP')\n\n\n#\n# import requests\n#\n# proxies = {\n#        'http': 'socks5h://15755149931sct-5:8ivtkleb@38.147.173.111:5001',\n#         'https': 'socks5h://15755149931sct-5:8ivtkleb@38.147.173.111:5001'\n#        }\n#\n# a = requests.get(url = 'https://www.okx.com/api/v5/public/instruments?instType=SWAP&instId=DYDX-USDT-SWAP',headers={'x-simulated-trading': '1'},proxies=proxies).json()\n\n# print(a)\n\n'''\n查询历史委托订单\n'''\n# from okx.api.trade import Trade\n#\n# # API 初始化\n# apikey = \"2f071928-25bf-4ea9-b171-efe4b6e4eefd\"\n# secretkey = \"0BE4E80811E950DBA93FA013D1F36516\"\n# passphrase = \"112233Ww..\"\n#\n# flag = \"1\"  # 实盘: 0, 模拟盘: 1\n#\n# tradeAPI = Trade(apikey, secretkey, passphrase, flag)\n#\n# # 查询币币历史订单（7天内）\n# # 已经撤销的未成交单 只保留2小时\n# result = tradeAPI.get_orders_history(\n#     instType=\"SWAP\",\n#     state='canceled'\n# )\n# print(result)\n\n\n'''\n止盈止损开单\n'''\nsl_trigger_px = 0.2\ntp_trigger_px = 0.2\n\nparams = dict(\n    instId='BTC-USDT-SWAP',\n    posSide='short',\n    openMoney=200,\n    tdMode='cross',\n    lever=10)\n\n\ndef get_sl_trigger_px(obj, instId, posSide, lever, sl_trigger_px) -> str:\n    \"\"\"\n    获取止损价格\n    \"\"\"\n    _re_try = 0\n    open_price = 0\n    while _re_try < 3 and open_price == 0:\n        _re_try += 1\n        try:\n            get_ticker_result = obj.trade._market.get_ticker(instId=instId)\n            # 获取市价\n            open_price = float(get_ticker_result['data']['askPx'])\n        except:\n            continue\n    # 根据 开仓价格 & 杠杆 & 方向 获取止损挂单价\n    # 开空\n    if posSide == \"short\":\n        # 止损价格 = 开仓价格 * (1 - 止损未亏损比例)\n        _sl_price = (1 + sl_trigger_px) * open_price\n        # 平仓止损挂单价格 = 开仓价格 + （（开仓价格 - 止损价格） / 杠杆倍数）\n        # sl_trigger_px_price = open_price + (open_price - ((open_price - _sl_price) / lever))\n    # 开多\n    elif posSide == \"long\":\n        # 止损价格 = 开仓价格 * (1 - 止损未亏损比例)\n        _sl_price = (1 - sl_trigger_px) * open_price\n        # 平仓止损挂单价格 = 开仓价格 - （（开仓价格 - 止损价格） / 杠杆倍数）\n        # sl_trigger_px_price = open_price - (open_price - ((open_price - _sl_price) / lever))\n    else:\n        raise ValueError(\"posSide参数错误\")\n    return str(_sl_price)\n\n\ndef get_tp_trigger_px(obj, instId, posSide, lever, tp_trigger_px) -> str:\n    \"\"\"\n    获取止盈价格\n    \"\"\"\n    _re_try = 0\n    open_price = 0\n    while _re_try < 3 and open_price == 0:\n        _re_try += 1\n        try:\n            get_ticker_result = obj.trade._market.get_ticker(instId=instId)\n            # 获取市价\n            open_price = float(get_ticker_result['data']['askPx'])\n        except:\n            continue\n    # 根据 开仓价格 & 杠杆 & 方向 获取止损挂单价\n    # 开多\n    if posSide == \"long\":\n        # 止盈价格 = 开仓价格 * (1 - 止损未亏损比例)\n        _tp_price = (1 + tp_trigger_px) * open_price\n        # 平仓止损挂单价格 = 开仓价格 + （（开仓价格 - 止盈价格 / 杠杆倍数）\n        # tp_trigger_px_price = open_price + (open_price - ((open_price - _tp_price) / lever))\n    # 开空\n    elif posSide == \"short\":\n        # 止损价格 = 开仓价格 * (1 - 止损未亏损比例)\n        _tp_price = (1 - tp_trigger_px) * open_price\n        # 平仓止损挂单价格 = 开仓价格 - （（开仓价格 - 止损价格） / 杠杆倍数）\n        # tp_trigger_px_price = open_price - (open_price - ((open_price - _tp_price) / lever))\n    else:\n        raise ValueError(\"posSide参数错误\")\n    return str(_tp_price)\n\n\nif sl_trigger_px:\n    a = get_sl_trigger_px(obj, params.get('instId'), params.get('posSide'), params.get('lever'), sl_trigger_px)\n    params.update({\"slTriggerPx\": a})\n    params.update({\"slOrdPx\": str(float(a)-1)})\nif tp_trigger_px:\n    b = get_tp_trigger_px(obj,params.get('instId'),params.get('posSide'),params.get('lever'),tp_trigger_px)\n    params.update({\"tpTriggerPx\": b})\n    params.update({\"tpOrdPx\": str(float(b)-1)})\n\n# result = obj.trade.open_market(**params)\n# result = obj.trade.close_market(instId=\"BTC-USDT-SWAP\", posSide='long', quantityCT='all',tdMode='cross')\n# print(result)\n# if result.get('set_order_result', {}).get('data', {}).get('sCode') == '0':\n#     print(111)\ndef close_market_2nd(obj, params):\n    import random\n    def split_into_parts(total, parts=5):\n        # 生成前 parts-1 个随机正整数\n        random_parts = [random.randint(1, int(total - parts + 1)) for _ in range(parts - 1)]\n\n        # 确保随机部分的和小于 total\n        while sum(random_parts) >= total:\n            random_parts = [random.randint(1, int(total - parts + 1)) for _ in range(parts - 1)]\n\n        # 计算剩余部分，并确保其为正数\n        remaining = total - sum(random_parts)\n        if remaining <= 0:\n            return split_into_parts(total, parts)\n\n        split_parts = random_parts + [remaining]\n\n        return split_parts\n\n    data = obj.account.get_positions().get('data')\n    for d in data:\n        if d['instId'] == params['instId'] and \\\n                d['mgnMode'] == params['tdMode'] and \\\n                d['posSide'] == params['posSide']:\n            availPos = float(d['availPos'])\n\n    # 获取分好的部分\n    split_parts = split_into_parts(availPos)\n    # 将最后一个部分替换为 'all'\n    split_parts[-1] = 'all'\n    market_data = []\n    for i in split_parts:\n        market_data.append(\n            dict(\n                instId=params.get('instId'),\n                posSide=params.get('posSide'),\n                mgnMode=params.get('tdMode'),\n                order_type='close_2nd',\n                quantityCT=i\n            )\n        )\n\n    return market_data\n\n# close_market_2nd(obj, params)\n\n\nres = {'instType': 'SWAP', 'instId': 'BTC-USDT-SWAP', 'state': None, 'ordId': None, 'meta': {}, 'request_param': None,\n       'func_param': {'instId': 'BTC-USDT-SWAP', 'tdMode': 'cross', 'posSide': 'short', 'quantityCT': 'all', 'meta': {}, 'timeout': 60, 'delay': 0.2, 'cancel': True, 'clOrdId': '', 'tag': '', 'newThread': False, 'callback': None, 'errorback': None},\n       'get_order_result': None, 'set_order_result': None, 'error_result': {'code': 'FUNC_EXCEPTION', 'data': {}, 'msg': 'Traceback (most recent call last):\\n  File \"/crawler/myokx/close.py\", line 513, in inner_func\\n    error_result = main_func(**main_data)\\n  File \"/crawler/myokx/close.py\", line 422, in main_func\\n    availPos = positionMap_result[\\'data\\'][tdMode][posSide][instId][\\'availPos\\']\\nKeyError: \\'BTC-USDT-SWAP\\'\\n'}, 'cancel_result': None}\nif res.get('set_order_result', {}) is not None:\n    if res.get('set_order_result', {}).get('data', {}).get('sCode') != '0':\n        print(111)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crawler/1.py b/crawler/1.py
--- a/crawler/1.py	(revision 5a578f7208e916469b03dcc38a714c42937801da)
+++ b/crawler/1.py	(date 1718439797888)
@@ -322,6 +322,17 @@
     params.update({"tpOrdPx": str(float(b)-1)})
 
 # result = obj.trade.open_market(**params)
+# print(result)
+import uuid
+clOrdId = uuid.uuid4().hex
+res = obj.trade.set_close_position(instId=params.get('instId'), posSide=params.get('posSide'), mgnMode=params.get('tdMode'), autoCxl=True, clOrdId=clOrdId)
+print(res)
+if res.get("clOrdId") == clOrdId:
+    print(111)
+else:
+    print(222)
+
+
 # result = obj.trade.close_market(instId="BTC-USDT-SWAP", posSide='long', quantityCT='all',tdMode='cross')
 # print(result)
 # if result.get('set_order_result', {}).get('data', {}).get('sCode') == '0':
@@ -372,10 +383,10 @@
 
 # close_market_2nd(obj, params)
 
-
-res = {'instType': 'SWAP', 'instId': 'BTC-USDT-SWAP', 'state': None, 'ordId': None, 'meta': {}, 'request_param': None,
-       'func_param': {'instId': 'BTC-USDT-SWAP', 'tdMode': 'cross', 'posSide': 'short', 'quantityCT': 'all', 'meta': {}, 'timeout': 60, 'delay': 0.2, 'cancel': True, 'clOrdId': '', 'tag': '', 'newThread': False, 'callback': None, 'errorback': None},
-       'get_order_result': None, 'set_order_result': None, 'error_result': {'code': 'FUNC_EXCEPTION', 'data': {}, 'msg': 'Traceback (most recent call last):\n  File "/crawler/myokx/close.py", line 513, in inner_func\n    error_result = main_func(**main_data)\n  File "/crawler/myokx/close.py", line 422, in main_func\n    availPos = positionMap_result[\'data\'][tdMode][posSide][instId][\'availPos\']\nKeyError: \'BTC-USDT-SWAP\'\n'}, 'cancel_result': None}
-if res.get('set_order_result', {}) is not None:
-    if res.get('set_order_result', {}).get('data', {}).get('sCode') != '0':
-        print(111)
\ No newline at end of file
+#
+# res = {'instType': 'SWAP', 'instId': 'BTC-USDT-SWAP', 'state': None, 'ordId': None, 'meta': {}, 'request_param': None,
+#        'func_param': {'instId': 'BTC-USDT-SWAP', 'tdMode': 'cross', 'posSide': 'short', 'quantityCT': 'all', 'meta': {}, 'timeout': 60, 'delay': 0.2, 'cancel': True, 'clOrdId': '', 'tag': '', 'newThread': False, 'callback': None, 'errorback': None},
+#        'get_order_result': None, 'set_order_result': None, 'error_result': {'code': 'FUNC_EXCEPTION', 'data': {}, 'msg': 'Traceback (most recent call last):\n  File "/crawler/myokx/close.py", line 513, in inner_func\n    error_result = main_func(**main_data)\n  File "/crawler/myokx/close.py", line 422, in main_func\n    availPos = positionMap_result[\'data\'][tdMode][posSide][instId][\'availPos\']\nKeyError: \'BTC-USDT-SWAP\'\n'}, 'cancel_result': None}
+# if res.get('set_order_result', {}) is not None:
+#     if res.get('set_order_result', {}).get('data', {}).get('sCode') != '0':
+#         print(111)
\ No newline at end of file
